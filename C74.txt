1st Section
------------------
import db from '../config';
import { ScrollView } from 'react-native-gesture-handler';

constructor(props){
    super(props)
    this.state = {
      allTransactions: [],
      //lastVisibleTransaction: null,
     // search:''
    }
  }

componentDidMount = async ()=>{
      const query = await db.collection("transactions").limit(10).get()
      query.docs.map((doc)=>{
        this.setState({
          allTransactions: [],
         // lastVisibleTransaction: doc
        })
      })
    }

 <ScrollView>
  {this.state.allTransactions.map((transaction)=>{
    return (
      <View style={{borderBottomWidth: 2, marginTop:100}}>
                              
                <Text>{"Transaction Type: " + transaction.transactionType}</Text>
                
              </View>
    )
  })}
  </ScrollView> 
-----------------------------------
Ist Section 2nd Half

<ScrollView>
  {this.state.allTransactions.map((transaction, index)=>{
    return (
      <View key={index} style={{borderBottomWidth: 2, marginTop:100}}>
                
                <Text>{"Book Id: " + transaction.bookId}</Text>
                 <Text>{"Student id: " + transaction.studentId}</Text>
                <Text>{"Transaction Type: " + transaction.transactionType}</Text>
                
              </View>
    )
  })}
  </ScrollView> 
 

---------------------------

2nd Section

<FlatList
        style={{flex:1}}
        data = {this.state.allTransactions}
        renderItem = {({item}) => (
          <View style={{borderBottomWidth: 2, marginTop:50}}>
                <Text>{"Book Id: " + item.bookId}</Text>
                <Text>{"Student id: " + item.studentId}</Text>
                <Text>{"Transaction Type: " + item.transactionType}</Text>
                
              </View>
        )}
       

        keyExtractor= {(item, index)=> index.toString()}
        
      >
       
</FlatList> 
-------------------------------------------------
2nd Section II half

uncomment state

lastVisibleTransaction: null 

<FlatList
        style={{flex:1}}
        data = {this.state.allTransactions}
        renderItem = {({item}) => (
          <View style={{borderBottomWidth: 2, marginTop:50}}>
                <Text>{"Book Id: " + item.bookId}</Text>
                <Text>{"Student id: " + item.studentId}</Text>
                <Text>{"Transaction Type: " + item.transactionType}</Text>
                
              </View>
        )}
       

        keyExtractor= {(item, index)=> index.toString()}
        onEndReached ={this.fetchMoreTransactions}
        onEndReachedThreshold={0.7}
      >
       
</FlatList> 

fetchMoreTransactions = async ()=>{
    const query = await db.collection("transactions")
    .startAfter(this.state.lastVisibleTransaction)
    .limit(7)
    .get()

    query.docs.map((doc)=>{
      this.setState({
        allTransactions: [...this.state.allTransactions, doc.data()],
        lastVisibleTransaction: doc
      })
    })
  }

-------------------------------------

3rd Section

 <View style={styles.searchBar}>
        <TextInput 
          style ={styles.bar}
          placeholder = "Enter Book Id or Student Id"
          onChangeText={(text)=>{this.setState({search:text})}}/>
          <TouchableOpacity
            style = {styles.searchButton}
            onPress={()=>{this.searchTransactions(this.state.search)}}
          >
            <Text>Search</Text>
          </TouchableOpacity>
</View>

const styles = StyleSheet.create({
    container: {
      flex: 1,
      marginTop: 20
    },
    searchBar:{
      flexDirection:'row',
      height:40,
      width:'auto',
      borderWidth:0.5,
      alignItems:'center',
      backgroundColor:'grey',
  
    },
    bar:{
      borderWidth:2,
      height:30,
      width:300,
      paddingLeft:10,
    },
    searchButton:{
      borderWidth:1,
      height:30,
      width:50,
      alignItems:'center',
      justifyContent:'center',
      backgroundColor:'green'
    }
  })

--------------------------
4th Section

searchTransactions= async(text) =>{
      var enteredText = text.split("")  
      if (enteredText[0].toUpperCase() ==='B'){
        const transaction =  await db.collection("transactions").where('bookId','==',text).get()
        transaction.docs.map((doc)=>{
          this.setState({
            allTransactions:[...this.state.allTransactions,doc.data()],
            lastVisibleTransaction: doc
          })
        })
      }
      else if(enteredText[0].toUpperCase() === 'S'){
        const transaction = await db.collection('transactions').where('studentId','==',text).get()
        transaction.docs.map((doc)=>{
          this.setState({
            allTransactions:[...this.state.allTransactions,doc.data()],
            lastVisibleTransaction: doc
          })
        })
      }
    }


fetchMoreTransactions = async ()=>{
      var text = this.state.search.toUpperCase()
      var enteredText = text.split("")

      
      if (enteredText[0].toUpperCase() ==='B'){
      const query = await db.collection("transactions").where('bookId','==',text).startAfter(this.state.lastVisibleTransaction).limit(10).get()
      query.docs.map((doc)=>{
        this.setState({
          allTransactions: [...this.state.allTransactions, doc.data()],
          lastVisibleTransaction: doc
        })
      })
    }
      else if(enteredText[0].toUpperCase() === 'S'){
        const query = await db.collection("transactions").where('bookId','==',text).startAfter(this.state.lastVisibleTransaction).limit(10).get()
        query.docs.map((doc)=>{
          this.setState({
            allTransactions: [...this.state.allTransactions, doc.data()],
            lastVisibleTransaction: doc
          })
        })
      }
  }




// expo update 37.0.0 --npm
